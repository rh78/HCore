/*
 * Smint.io Content Licensing Consumer API
 *
 * The Smint.io Content Licensing Consumer API allows to access all major creative content providers through an easy-to-use, central interface 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: office@smint.io
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HCore.Web.Models
{ 
    /// <summary>
    /// More details about the error, if applicable
    /// </summary>
    [DataContract]
    [NotMapped]
	public partial class ErrorDetails : IEquatable<ErrorDetails>
    { 
		private string _Uuid;
		
		/// <summary>
        /// The UUID of the affected record, if applicable
        /// </summary>
        /// <value>The UUID of the affected record, if applicable</value>
        [DataMember(Name="uuid")]
		public string Uuid { get => _Uuid; set { _Uuid = value; UuidSet = true; } }
		
		public bool UuidSet = false;		

		private string _Name;
		
		/// <summary>
        /// The name of the affected record, if applicable
        /// </summary>
        /// <value>The name of the affected record, if applicable</value>
        [DataMember(Name="name")]
		public string Name { get => _Name; set { _Name = value; NameSet = true; } }
		
		public bool NameSet = false;		

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorDetails {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ErrorDetails)obj);
        }

        /// <summary>
        /// Returns true if ErrorDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ErrorDetails left, ErrorDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ErrorDetails left, ErrorDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
