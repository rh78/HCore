/*
 * RHCore Identity Auth API
 *
 * The RHCore Identity Auth API provides the most common methods to handle authentication server side using ASP.NET Identity Core.
 *
 * OpenAPI spec version: 1.0.0-s2
 * Contact: holzner@invest-fit.at
 * Generated by: https://openapi-generator.tech
 */

using System.Net;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ReinhardHolzner.Core.Web.Attributes;
using ReinhardHolzner.Core.Web.Result;
using ReinhardHolzner.Core.Identity.AuthAPI.Generated.Models;

namespace ReinhardHolzner.Core.Identity.AuthAPI.Generated.Controllers
{ 
	/// <summary>
    /// 
    /// </summary>
    public interface ISecureApiController
    { 
		/// <summary>
        /// Confirms the email address of an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="userConfirmEmailSpec"></param>
        /// <response code="200">The user&#39;s email address has been confirmed</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        Task ConfirmUserEmailAddressAsync([FromRoute][Required]string userUuid, [FromBody]UserConfirmEmailSpec userConfirmEmailSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Creates a new user
        /// </summary>
        /// <param name="userSpec"></param>
        /// <response code="201">An user has been successfully registered, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        Task<ApiResult<User>> CreateUserAsync([FromBody]UserSpec userSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Gets an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <response code="200">An user</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="403">Access to the resource was forbidden. Check the response for more details about the issue</response>
        /// <response code="404">The desired record was not found. Check the response for more details about the issue</response>
        Task<ApiResult<User>> GetUserAsync([FromRoute][Required]string userUuid, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Resends the email confirmation email for an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <response code="200">The user&#39;s email confirmation email has been resent</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        Task ResendUserEmailConfirmationEmailAsync([FromRoute][Required]string userUuid, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Resets the password for an user
        /// </summary>
        /// <param name="resetUserPasswordSpec"></param>
        /// <response code="200">The password of the user has been reset</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        Task ResetUserPasswordAsync([FromBody]ResetUserPasswordSpec resetUserPasswordSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Resets the password for an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="setUserPasswordSpec"></param>
        /// <response code="200">The password of the user has been set</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        Task SetUserPasswordAsync([FromRoute][Required]string userUuid, [FromBody]SetUserPasswordSpec setUserPasswordSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Signs in an user
        /// </summary>
        /// <param name="userSignInSpec"></param>
        /// <response code="200">The user has been signed in, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        Task SignInUserAsync([FromBody]UserSignInSpec userSignInSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Signs out the currently signed in user, if applicable
        /// </summary>
        /// <response code="200">The user has been signed out, if a user was signed in. You should refresh the page</response>
        Task SignOutUserAsync(CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Updates a user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="user"></param>
        /// <response code="200">An user</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="403">Access to the resource was forbidden. Check the response for more details about the issue</response>
        /// <response code="404">The desired record was not found. Check the response for more details about the issue</response>
        Task<ApiResult<User>> UpdateUserAsync([FromRoute][Required]string userUuid, [FromBody]User user, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Initiates the \&quot;forgot password\&quot; flow for an user
        /// </summary>
        /// <param name="userForgotPasswordSpec"></param>
        /// <response code="200">The forgot password flow has been initiated</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        Task UserForgotPasswordAsync([FromBody]UserForgotPasswordSpec userForgotPasswordSpec, CancellationToken cancellationToken = default(CancellationToken));        
    }
	
    /// <summary>
    /// 
    /// </summary>
	[ApiController]
    public partial class SecureApiController : Controller
    { 
		private ISecureApiController _implementation;
	  
		public SecureApiController(ISecureApiController implementation)
		{
			_implementation = implementation;
		}		
	
        /// <summary>
        /// Confirms the email address of an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="userConfirmEmailSpec"></param>
        /// <response code="200">The user&#39;s email address has been confirmed</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/{userUuid}/confirmEmail")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> ConfirmUserEmailAddressAsync([FromRoute][Required]string userUuid, [FromBody]UserConfirmEmailSpec userConfirmEmailSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.ConfirmUserEmailAddressAsync(userUuid, userConfirmEmailSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <param name="userSpec"></param>
        /// <response code="201">An user has been successfully registered, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> CreateUserAsync([FromBody]UserSpec userSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			var result = await _implementation.CreateUserAsync(userSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode(result.StatusCode, result.Result);            
			
			foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, header.Value.ToString());
			
            return response;								
        }
        /// <summary>
        /// Gets an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <response code="200">An user</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="403">Access to the resource was forbidden. Check the response for more details about the issue</response>
        /// <response code="404">The desired record was not found. Check the response for more details about the issue</response>
        [HttpGet]
        [Route("/auth/v1/users/{userUuid}")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> GetUserAsync([FromRoute][Required]string userUuid, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			var result = await _implementation.GetUserAsync(userUuid, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode(result.StatusCode, result.Result);            
			
			foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, header.Value.ToString());
			
            return response;								
        }
        /// <summary>
        /// Resends the email confirmation email for an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <response code="200">The user&#39;s email confirmation email has been resent</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/{userUuid}/resendEmailConfirmationEmail")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> ResendUserEmailConfirmationEmailAsync([FromRoute][Required]string userUuid, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.ResendUserEmailConfirmationEmailAsync(userUuid, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Resets the password for an user
        /// </summary>
        /// <param name="resetUserPasswordSpec"></param>
        /// <response code="200">The password of the user has been reset</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/resetPassword")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> ResetUserPasswordAsync([FromBody]ResetUserPasswordSpec resetUserPasswordSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.ResetUserPasswordAsync(resetUserPasswordSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Resets the password for an user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="setUserPasswordSpec"></param>
        /// <response code="200">The password of the user has been set</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/{userUuid}/setPassword")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> SetUserPasswordAsync([FromRoute][Required]string userUuid, [FromBody]SetUserPasswordSpec setUserPasswordSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.SetUserPasswordAsync(userUuid, setUserPasswordSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Signs in an user
        /// </summary>
        /// <param name="userSignInSpec"></param>
        /// <response code="200">The user has been signed in, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="401">Authorization for the operation failed. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/signin")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> SignInUserAsync([FromBody]UserSignInSpec userSignInSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.SignInUserAsync(userSignInSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Signs out the currently signed in user, if applicable
        /// </summary>
        /// <response code="200">The user has been signed out, if a user was signed in. You should refresh the page</response>
        [HttpPost]
        [Route("/auth/v1/users/signout")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> SignOutUserAsync(CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.SignOutUserAsync(cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Updates a user
        /// </summary>
        /// <param name="userUuid">The UUID of the user</param>
        /// <param name="user"></param>
        /// <response code="200">An user</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        /// <response code="403">Access to the resource was forbidden. Check the response for more details about the issue</response>
        /// <response code="404">The desired record was not found. Check the response for more details about the issue</response>
        [HttpPut]
        [Route("/auth/v1/users/{userUuid}")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> UpdateUserAsync([FromRoute][Required]string userUuid, [FromBody]User user, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			var result = await _implementation.UpdateUserAsync(userUuid, user, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode(result.StatusCode, result.Result);            
			
			foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, header.Value.ToString());
			
            return response;								
        }
        /// <summary>
        /// Initiates the \&quot;forgot password\&quot; flow for an user
        /// </summary>
        /// <param name="userForgotPasswordSpec"></param>
        /// <response code="200">The forgot password flow has been initiated</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/forgotPassword")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> UserForgotPasswordAsync([FromBody]UserForgotPasswordSpec userForgotPasswordSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.UserForgotPasswordAsync(userForgotPasswordSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
    }
}
