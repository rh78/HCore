/*
 * RHCore Authentication API
 *
 * The RHCore Authentication API provides the most common methods to handle authentication server side using ASP.NET Identity Core.
 *
 * OpenAPI spec version: 1.0.0-s2
 * Contact: holzner@invest-fit.at
 * Generated by: https://openapi-generator.tech
 */

using System.Net;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ReinhardHolzner.Core.Web.Attributes;
using ReinhardHolzner.Core.Web.Result;
using ReinhardHolzner.Core.Identity.AuthAPI.Generated.Models;

namespace ReinhardHolzner.Core.Identity.AuthAPI.Generated.Controllers
{ 
	/// <summary>
    /// 
    /// </summary>
    public interface ISecureApiController
    { 
		/// <summary>
        /// Registers a new user
        /// </summary>
        /// <param name="userSpec"></param>
        /// <response code="201">An user has been successfully created, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        Task RegisterUserAsync([FromBody]UserSpec userSpec, CancellationToken cancellationToken = default(CancellationToken));        

		/// <summary>
        /// Signs out the currently signed in user, if applicable
        /// </summary>
        /// <response code="200">The user has been signed out, if a user was signed in. You should refresh the page</response>
        Task SignOutUserAsync(CancellationToken cancellationToken = default(CancellationToken));        
    }
	
    /// <summary>
    /// 
    /// </summary>
	[ApiController]
    public partial class SecureApiController : Controller
    { 
		private ISecureApiController _implementation;
	  
		public SecureApiController(ISecureApiController implementation)
		{
			_implementation = implementation;
		}		
	
        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <param name="userSpec"></param>
        /// <response code="201">An user has been successfully created, the response contains the secure cookies. You should refresh the page</response>
        /// <response code="400">An issue occured when validating the arguments. Check the response for more details about the issue</response>
        [HttpPost]
        [Route("/auth/v1/users/register")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> RegisterUserAsync([FromBody]UserSpec userSpec, CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.RegisterUserAsync(userSpec, cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
        /// <summary>
        /// Signs out the currently signed in user, if applicable
        /// </summary>
        /// <response code="200">The user has been signed out, if a user was signed in. You should refresh the page</response>
        [HttpPost]
        [Route("/auth/v1/users/signout")]
        [ProtectApi]
        [ValidateModelState]
        public async Task<IActionResult> SignOutUserAsync(CancellationToken cancellationToken = default(CancellationToken))
        { 	
			await _implementation.SignOutUserAsync(cancellationToken).ConfigureAwait(false);
			
			IActionResult response = StatusCode((int)HttpStatusCode.NoContent);
			
            return response;								
        }
    }
}
