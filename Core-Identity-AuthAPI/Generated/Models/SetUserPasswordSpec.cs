/*
 * RHCore Identity Auth API
 *
 * The RHCore Identity Auth API provides the most common methods to handle authentication server side using ASP.NET Identity Core.
 *
 * OpenAPI spec version: 1.0.0-s2
 * Contact: holzner@invest-fit.at
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ReinhardHolzner.Core.Identity.AuthAPI.Generated.Models
{ 
    /// <summary>
    /// The information required to set the password of the user
    /// </summary>
    [DataContract]
    [NotMapped]
	public partial class SetUserPasswordSpec : IEquatable<SetUserPasswordSpec>
    { 
		private string _OldPassword;
		
		/// <summary>
        /// The password of the user
        /// </summary>
        /// <value>The password of the user</value>
        [Required]
        [DataMember(Name="old_password")]
		public string OldPassword { get => _OldPassword; set { _OldPassword = value; OldPasswordSet = true; } }
		
		public bool OldPasswordSet = false;		

		private string _NewPassword;
		
		/// <summary>
        /// The password of the user
        /// </summary>
        /// <value>The password of the user</value>
        [DataMember(Name="new_password")]
		public string NewPassword { get => _NewPassword; set { _NewPassword = value; NewPasswordSet = true; } }
		
		public bool NewPasswordSet = false;		

		private string _NewPasswordConfirmation;
		
		/// <summary>
        /// The password confirmation
        /// </summary>
        /// <value>The password confirmation</value>
        [DataMember(Name="new_password_confirmation")]
		public string NewPasswordConfirmation { get => _NewPasswordConfirmation; set { _NewPasswordConfirmation = value; NewPasswordConfirmationSet = true; } }
		
		public bool NewPasswordConfirmationSet = false;		

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetUserPasswordSpec {\n");
            sb.Append("  OldPassword: ").Append(OldPassword).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  NewPasswordConfirmation: ").Append(NewPasswordConfirmation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SetUserPasswordSpec)obj);
        }

        /// <summary>
        /// Returns true if SetUserPasswordSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of SetUserPasswordSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetUserPasswordSpec other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OldPassword == other.OldPassword ||
                    OldPassword != null &&
                    OldPassword.Equals(other.OldPassword)
                ) && 
                (
                    NewPassword == other.NewPassword ||
                    NewPassword != null &&
                    NewPassword.Equals(other.NewPassword)
                ) && 
                (
                    NewPasswordConfirmation == other.NewPasswordConfirmation ||
                    NewPasswordConfirmation != null &&
                    NewPasswordConfirmation.Equals(other.NewPasswordConfirmation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OldPassword != null)
                    hashCode = hashCode * 59 + OldPassword.GetHashCode();
                    if (NewPassword != null)
                    hashCode = hashCode * 59 + NewPassword.GetHashCode();
                    if (NewPasswordConfirmation != null)
                    hashCode = hashCode * 59 + NewPasswordConfirmation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SetUserPasswordSpec left, SetUserPasswordSpec right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SetUserPasswordSpec left, SetUserPasswordSpec right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
