<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="access_token_expired" xml:space="preserve">
    <value>The access token is invalid or expired</value>
  </data>
  <data name="account_locked_out" xml:space="preserve">
    <value>The user account is locked out</value>
  </data>
  <data name="api_credentials_missing" xml:space="preserve">
    <value>The API credentials are missing</value>
  </data>
  <data name="client_id_invalid" xml:space="preserve">
    <value>The client ID contains invalid characters</value>
  </data>
  <data name="client_id_missing" xml:space="preserve">
    <value>The client ID is missing</value>
  </data>
  <data name="client_id_too_long" xml:space="preserve">
    <value>The client ID is too long</value>
  </data>
  <data name="client_secret_invalid" xml:space="preserve">
    <value>The client secret contains invalid characters</value>
  </data>
  <data name="client_secret_missing" xml:space="preserve">
    <value>The client secret is missing</value>
  </data>
  <data name="client_secret_too_long" xml:space="preserve">
    <value>The client secret is too long</value>
  </data>
  <data name="code_invalid" xml:space="preserve">
    <value>The code contains invalid characters</value>
  </data>
  <data name="code_missing" xml:space="preserve">
    <value>The code is missing</value>
  </data>
  <data name="code_too_long" xml:space="preserve">
    <value>The code is too long</value>
  </data>
  <data name="duplicate_user_name" xml:space="preserve">
    <value>This user name already exists</value>
  </data>
  <data name="email_invalid" xml:space="preserve">
    <value>The email address is invalid</value>
  </data>
  <data name="email_missing" xml:space="preserve">
    <value>The email address is missing</value>
  </data>
  <data name="internal_server_error" xml:space="preserve">
    <value>An unexpected server error occured</value>
  </data>
  <data name="invalid_credentials" xml:space="preserve">
    <value>The user credentials are not valid</value>
  </data>
  <data name="issuer_invalid" xml:space="preserve">
    <value>The issuer is invalid</value>
  </data>
  <data name="issuer_missing" xml:space="preserve">
    <value>The issuer is missing</value>
  </data>
  <data name="issuer_too_long" xml:space="preserve">
    <value>The issuer is too long</value>
  </data>
  <data name="tenant_uuid_invalid" xml:space="preserve">
    <value>The tenant UUID is invalid</value>
  </data>
  <data name="tenant_uuid_too_long" xml:space="preserve">
    <value>The tenant UUID is too long</value>
  </data>
  <data name="max_paging_limit_exceeded" xml:space="preserve">
    <value>The paging limit must not exceed 50 records</value>
  </data>
  <data name="max_paging_offset_exceeded" xml:space="preserve">
    <value>The paging offset must not exceed 500 records</value>
  </data>
  <data name="name_invalid" xml:space="preserve">
    <value>The name contains invalid characters</value>
  </data>
  <data name="name_missing" xml:space="preserve">
    <value>The name is missing</value>
  </data>
  <data name="name_too_long" xml:space="preserve">
    <value>The name is too long</value>
  </data>
  <data name="not_found" xml:space="preserve">
    <value>The record was not found</value>
  </data>
  <data name="not_implemented" xml:space="preserve">
    <value>This functionality is not yet implemented</value>
  </data>
  <data name="no_records_specified" xml:space="preserve">
    <value>Please provide records for the update operation</value>
  </data>
  <data name="paging_limit_invalid" xml:space="preserve">
    <value>The paging limit must be equal to or greater than zero</value>
  </data>
  <data name="paging_offset_invalid" xml:space="preserve">
    <value>The paging offset must be equal to or greater than zero</value>
  </data>
  <data name="password_confirmation_missing" xml:space="preserve">
    <value>The password confirmation is missing</value>
  </data>
  <data name="password_confirmation_no_match" xml:space="preserve">
    <value>The password confirmation is not matching the password</value>
  </data>
  <data name="password_does_not_match" xml:space="preserve">
    <value>The password does not match our records</value>
  </data>
  <data name="password_invalid" xml:space="preserve">
    <value>The password contains invalid characters</value>
  </data>
  <data name="password_missing" xml:space="preserve">
    <value>The password is missing</value>
  </data>
  <data name="password_requires_non_alphanumeric" xml:space="preserve">
    <value>The password requires non alphanumeric characters</value>
  </data>
  <data name="password_too_long" xml:space="preserve">
    <value>The password is too long</value>
  </data>
  <data name="password_too_short" xml:space="preserve">
    <value>The password is too short</value>
  </data>
  <data name="permission_denied" xml:space="preserve">
    <value>The permission to access this location was denied</value>
  </data>
  <data name="phone_number_invalid" xml:space="preserve">
    <value>The phone number is invalid</value>
  </data>
  <data name="phone_number_missing" xml:space="preserve">
    <value>The phone number is missing</value>
  </data>
  <data name="private_key_invalid" xml:space="preserve">
    <value>The private key is invalid, decoding failed</value>
  </data>
  <data name="private_key_missing" xml:space="preserve">
    <value>The private key is missing</value>
  </data>
  <data name="private_key_no_delimiters" xml:space="preserve">
    <value>The private key string contains no private key delimiters</value>
  </data>
  <data name="private_key_no_private_key" xml:space="preserve">
    <value>The private key data given does not contain private key data</value>
  </data>
  <data name="private_key_too_long" xml:space="preserve">
    <value>The private key is too long</value>
  </data>
  <data name="redirect_url_invalid" xml:space="preserve">
    <value>The redirect URL is invalid</value>
  </data>
  <data name="redirect_url_missing" xml:space="preserve">
    <value>The redirect URL is missing</value>
  </data>
  <data name="redirect_url_must_be_absolute" xml:space="preserve">
    <value>The redirect URL must be absolute</value>
  </data>
  <data name="redirect_url_not_required" xml:space="preserve">
    <value>The redirect URL is not required</value>
  </data>
  <data name="redirect_url_too_long" xml:space="preserve">
    <value>The redirect URL is too long</value>
  </data>
  <data name="security_token_invalid" xml:space="preserve">
    <value>The security token is invalid or expired</value>
  </data>
  <data name="state_invalid" xml:space="preserve">
    <value>The state is invalid</value>
  </data>
  <data name="subject_invalid" xml:space="preserve">
    <value>The subject is invalid</value>
  </data>
  <data name="subject_missing" xml:space="preserve">
    <value>The subject is missing</value>
  </data>
  <data name="subject_too_long" xml:space="preserve">
    <value>The subject is too long</value>
  </data>
  <data name="too_many_update_records" xml:space="preserve">
    <value>Please only update up to 50 records at once</value>
  </data>
  <data name="user_credentials_missing" xml:space="preserve">
    <value>The user credentials are missing</value>
  </data>
  <data name="user_group_not_found" xml:space="preserve">
    <value>The user group was not found</value>
  </data>
  <data name="user_group_uuid_invalid" xml:space="preserve">
    <value>The user group UUID is invalid</value>
  </data>
  <data name="user_group_uuid_missing" xml:space="preserve">
    <value>The user group UUID is missing</value>
  </data>
  <data name="user_name_invalid" xml:space="preserve">
    <value>The user name contains invalid characters</value>
  </data>
  <data name="user_name_missing" xml:space="preserve">
    <value>The user name is missing</value>
  </data>
  <data name="user_name_too_long" xml:space="preserve">
    <value>The user name is too long</value>
  </data>
  <data name="user_not_found" xml:space="preserve">
    <value>The user was not found</value>
  </data>
  <data name="user_uuid_invalid" xml:space="preserve">
    <value>The user UUID is invalid</value>
  </data>
  <data name="user_uuid_missing" xml:space="preserve">
    <value>The user UUID is missing</value>
  </data>
  <data name="uuid_invalid" xml:space="preserve">
    <value>The UUID is invalid</value>
  </data>
  <data name="uuid_missing" xml:space="preserve">
    <value>The UUID is missing</value>
  </data>
  <data name="validation_failed" xml:space="preserve">
    <value>Validation of the submitted data failed</value>
  </data>
  <data name="user_no_member_of_user_group" xml:space="preserve">
    <value>The user is no member of the user group</value>
  </data>
  <data name="scroll_uuid_invalid" xml:space="preserve">
    <value>The scroll UUID contains invalid characters</value>
  </data>
  <data name="scroll_uuid_too_long" xml:space="preserve">
    <value>The scroll UUID is too long</value>
  </data>
  <data name="argument_invalid" xml:space="preserve">
    <value>The argument is invalid</value>
  </data>
  <data name="argument_missing" xml:space="preserve">
    <value>The argument is missing</value>
  </data>
</root>