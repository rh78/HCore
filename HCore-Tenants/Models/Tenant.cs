/*
 * Smint.io Content Licensing Consumer Admin API
 *
 * The Smint.io Content Licensing Consumer Admin API allows to administrate the Content License Consumer API backend 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: office@smint.io
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HCore.Tenants.Models
{ 
    /// <summary>
    /// The tenant
    /// </summary>
    [DataContract]
    [NotMapped]
    [Serializable]
	public partial class Tenant : IEquatable<Tenant>
    { 
		private string _Uuid;
		
		/// <summary>
        /// The UUID of the tenant
        /// </summary>
        /// <value>The UUID of the tenant</value>
        [DataMember(Name="uuid")]
		public string Uuid { get => _Uuid; set { _Uuid = value; UuidSet = true; } }
		
		public bool UuidSet = false;		

		private string _Name;
		
		/// <summary>
        /// The name of the tenant
        /// </summary>
        /// <value>The name of the tenant</value>
        [DataMember(Name="name")]
		public string Name { get => _Name; set { _Name = value; NameSet = true; } }
		
		public bool NameSet = false;		

		private string _Subdomain;
		
		/// <summary>
        /// The tenant subdomain
        /// </summary>
        /// <value>The tenant subdomain</value>
        [DataMember(Name="subdomain")]
		public string Subdomain { get => _Subdomain; set { _Subdomain = value; SubdomainSet = true; } }
		
		public bool SubdomainSet = false;		

		private string _WebUrl;
		
		/// <summary>
        /// The web base URL of the tenant
        /// </summary>
        /// <value>The web base URL of the tenant</value>
        [DataMember(Name="web_url")]
		public string WebUrl { get => _WebUrl; set { _WebUrl = value; WebUrlSet = true; } }
		
		public bool WebUrlSet = false;		

		private string _BackendApiUrl;
		
		/// <summary>
        /// The backend API base URL of the tenant
        /// </summary>
        /// <value>The backend API base URL of the tenant</value>
        [DataMember(Name="backend_api_url")]
		public string BackendApiUrl { get => _BackendApiUrl; set { _BackendApiUrl = value; BackendApiUrlSet = true; } }
		
		public bool BackendApiUrlSet = false;		

		private string _FrontendApiUrl;
		
		/// <summary>
        /// The frontend API base URL of the tenant
        /// </summary>
        /// <value>The frontend API base URL of the tenant</value>
        [DataMember(Name="frontend_api_url")]
		public string FrontendApiUrl { get => _FrontendApiUrl; set { _FrontendApiUrl = value; FrontendApiUrlSet = true; } }
		
		public bool FrontendApiUrlSet = false;		

		private string _LogoSvgUrl;
		
		/// <summary>
        /// The logo URL of the tenant. The logo is provided in SVG format, if possible. If no SVG logo is present, the PNG version will be delivered
        /// </summary>
        /// <value>The logo URL of the tenant. The logo is provided in SVG format, if possible. If no SVG logo is present, the PNG version will be delivered</value>
        [DataMember(Name="logo_svg_url")]
		public string LogoSvgUrl { get => _LogoSvgUrl; set { _LogoSvgUrl = value; LogoSvgUrlSet = true; } }
		
		public bool LogoSvgUrlSet = false;		

		private string _LogoPngUrl;
		
		/// <summary>
        /// The logo URL of the tenant. The logo is provided in PNG format
        /// </summary>
        /// <value>The logo URL of the tenant. The logo is provided in PNG format</value>
        [DataMember(Name="logo_png_url")]
		public string LogoPngUrl { get => _LogoPngUrl; set { _LogoPngUrl = value; LogoPngUrlSet = true; } }
		
		public bool LogoPngUrlSet = false;		

		private string _IconIcoUrl;
		
		/// <summary>
        /// An optional link to the content provider icon in ICO or PNG format for favicon use
        /// </summary>
        /// <value>An optional link to the content provider icon in ICO or PNG format for favicon use</value>
        [DataMember(Name="icon_ico_url")]
		public string IconIcoUrl { get => _IconIcoUrl; set { _IconIcoUrl = value; IconIcoUrlSet = true; } }
		
		public bool IconIcoUrlSet = false;		

		private int? _PrimaryColor;
		
		/// <summary>
        /// The tenants primary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)
        /// </summary>
        /// <value>The tenants primary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)</value>
        [DataMember(Name="primary_color")]
		public int? PrimaryColor { get => _PrimaryColor; set { _PrimaryColor = value; PrimaryColorSet = true; } }
		
		public bool PrimaryColorSet = false;		

		private int? _SecondaryColor;
		
		/// <summary>
        /// The tenants secondary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)
        /// </summary>
        /// <value>The tenants secondary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)</value>
        [DataMember(Name="secondary_color")]
		public int? SecondaryColor { get => _SecondaryColor; set { _SecondaryColor = value; SecondaryColorSet = true; } }
		
		public bool SecondaryColorSet = false;		

		private int? _TextOnPrimaryColor;
		
		/// <summary>
        /// The tenants text on primary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)
        /// </summary>
        /// <value>The tenants text on primary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)</value>
        [DataMember(Name="text_on_primary_color")]
		public int? TextOnPrimaryColor { get => _TextOnPrimaryColor; set { _TextOnPrimaryColor = value; TextOnPrimaryColorSet = true; } }
		
		public bool TextOnPrimaryColorSet = false;		

		private int? _TextOnSecondaryColor;
		
		/// <summary>
        /// The tenants text on secondary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)
        /// </summary>
        /// <value>The tenants text on secondary color, as defined in the [https://material.io/tools/color](Material Design Color Tool)</value>
        [DataMember(Name="text_on_secondary_color")]
		public int? TextOnSecondaryColor { get => _TextOnSecondaryColor; set { _TextOnSecondaryColor = value; TextOnSecondaryColorSet = true; } }
		
		public bool TextOnSecondaryColorSet = false;		

		private string _SupportEmail;
		
		/// <summary>
        /// The support email of the tenant
        /// </summary>
        /// <value>The support email of the tenant</value>
        [DataMember(Name="support_email")]
		public string SupportEmail { get => _SupportEmail; set { _SupportEmail = value; SupportEmailSet = true; } }
		
		public bool SupportEmailSet = false;		

		private string _NoreplyEmail;
		
		/// <summary>
        /// The noreply email of the tenant
        /// </summary>
        /// <value>The noreply email of the tenant</value>
        [DataMember(Name="noreply_email")]
		public string NoreplyEmail { get => _NoreplyEmail; set { _NoreplyEmail = value; NoreplyEmailSet = true; } }
		
		public bool NoreplyEmailSet = false;		

		private string _ProductName;
		
		/// <summary>
        /// The product name of the tenant
        /// </summary>
        /// <value>The product name of the tenant</value>
        [DataMember(Name="product_name")]
		public string ProductName { get => _ProductName; set { _ProductName = value; ProductNameSet = true; } }
		
		public bool ProductNameSet = false;		

		private string _DefaultCulture;
		
		/// <summary>
        /// The default culture of the tenant
        /// </summary>
        /// <value>The default culture of the tenant</value>
        [DataMember(Name="default_culture")]
		public string DefaultCulture { get => _DefaultCulture; set { _DefaultCulture = value; DefaultCultureSet = true; } }
		
		public bool DefaultCultureSet = false;		

		private string _DefaultCurrency;
		
		/// <summary>
        /// The currency. See *CurrencyEnum* for a list of currently available currencies
        /// </summary>
        /// <value>The currency. See *CurrencyEnum* for a list of currently available currencies</value>
        [DataMember(Name="default_currency")]
		public string DefaultCurrency { get => _DefaultCurrency; set { _DefaultCurrency = value; DefaultCurrencySet = true; } }
		
		public bool DefaultCurrencySet = false;		

		private bool? _UsersAreExternallyManaged;
		
		/// <summary>
        /// Indicates if the user groups and accounts are externally managed
        /// </summary>
        /// <value>Indicates if the user groups and accounts are externally managed</value>
        [DataMember(Name="users_are_externally_managed")]
		public bool? UsersAreExternallyManaged { get => _UsersAreExternallyManaged; set { _UsersAreExternallyManaged = value; UsersAreExternallyManagedSet = true; } }
		
		public bool UsersAreExternallyManagedSet = false;		

		private bool? _ExternalUsersAreManuallyManaged;
		
		/// <summary>
        /// Indicates if the external user accounts are manually managed
        /// </summary>
        /// <value>Indicates if the external user accounts are manually managed</value>
        [DataMember(Name="external_users_are_manually_managed")]
		public bool? ExternalUsersAreManuallyManaged { get => _ExternalUsersAreManuallyManaged; set { _ExternalUsersAreManuallyManaged = value; ExternalUsersAreManuallyManagedSet = true; } }
		
		public bool ExternalUsersAreManuallyManagedSet = false;		

		private int? _Version;
		
		/// <summary>
        /// The record version
        /// </summary>
        /// <value>The record version</value>
        [DataMember(Name="version")]
		public int? Version { get => _Version; set { _Version = value; VersionSet = true; } }
		
		public bool VersionSet = false;		

		private DateTimeOffset? _CreatedAt;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) when the record was created
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) when the record was created</value>
        [DataMember(Name="created_at")]
		public DateTimeOffset? CreatedAt { get => _CreatedAt; set { _CreatedAt = value; CreatedAtSet = true; } }
		
		public bool CreatedAtSet = false;		

		private DateTimeOffset? _LastUpdatedAt;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) when the record was last updated
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) when the record was last updated</value>
        [DataMember(Name="last_updated_at")]
		public DateTimeOffset? LastUpdatedAt { get => _LastUpdatedAt; set { _LastUpdatedAt = value; LastUpdatedAtSet = true; } }
		
		public bool LastUpdatedAtSet = false;		

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tenant {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("  WebUrl: ").Append(WebUrl).Append("\n");
            sb.Append("  BackendApiUrl: ").Append(BackendApiUrl).Append("\n");
            sb.Append("  FrontendApiUrl: ").Append(FrontendApiUrl).Append("\n");
            sb.Append("  LogoSvgUrl: ").Append(LogoSvgUrl).Append("\n");
            sb.Append("  LogoPngUrl: ").Append(LogoPngUrl).Append("\n");
            sb.Append("  IconIcoUrl: ").Append(IconIcoUrl).Append("\n");
            sb.Append("  PrimaryColor: ").Append(PrimaryColor).Append("\n");
            sb.Append("  SecondaryColor: ").Append(SecondaryColor).Append("\n");
            sb.Append("  TextOnPrimaryColor: ").Append(TextOnPrimaryColor).Append("\n");
            sb.Append("  TextOnSecondaryColor: ").Append(TextOnSecondaryColor).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  NoreplyEmail: ").Append(NoreplyEmail).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  DefaultCulture: ").Append(DefaultCulture).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  UsersAreExternallyManaged: ").Append(UsersAreExternallyManaged).Append("\n");
            sb.Append("  ExternalUsersAreManuallyManaged: ").Append(ExternalUsersAreManuallyManaged).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tenant)obj);
        }

        /// <summary>
        /// Returns true if Tenant instances are equal
        /// </summary>
        /// <param name="other">Instance of Tenant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tenant other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Subdomain == other.Subdomain ||
                    Subdomain != null &&
                    Subdomain.Equals(other.Subdomain)
                ) && 
                (
                    WebUrl == other.WebUrl ||
                    WebUrl != null &&
                    WebUrl.Equals(other.WebUrl)
                ) && 
                (
                    BackendApiUrl == other.BackendApiUrl ||
                    BackendApiUrl != null &&
                    BackendApiUrl.Equals(other.BackendApiUrl)
                ) && 
                (
                    FrontendApiUrl == other.FrontendApiUrl ||
                    FrontendApiUrl != null &&
                    FrontendApiUrl.Equals(other.FrontendApiUrl)
                ) && 
                (
                    LogoSvgUrl == other.LogoSvgUrl ||
                    LogoSvgUrl != null &&
                    LogoSvgUrl.Equals(other.LogoSvgUrl)
                ) && 
                (
                    LogoPngUrl == other.LogoPngUrl ||
                    LogoPngUrl != null &&
                    LogoPngUrl.Equals(other.LogoPngUrl)
                ) && 
                (
                    IconIcoUrl == other.IconIcoUrl ||
                    IconIcoUrl != null &&
                    IconIcoUrl.Equals(other.IconIcoUrl)
                ) && 
                (
                    PrimaryColor == other.PrimaryColor ||
                    PrimaryColor != null &&
                    PrimaryColor.Equals(other.PrimaryColor)
                ) && 
                (
                    SecondaryColor == other.SecondaryColor ||
                    SecondaryColor != null &&
                    SecondaryColor.Equals(other.SecondaryColor)
                ) && 
                (
                    TextOnPrimaryColor == other.TextOnPrimaryColor ||
                    TextOnPrimaryColor != null &&
                    TextOnPrimaryColor.Equals(other.TextOnPrimaryColor)
                ) && 
                (
                    TextOnSecondaryColor == other.TextOnSecondaryColor ||
                    TextOnSecondaryColor != null &&
                    TextOnSecondaryColor.Equals(other.TextOnSecondaryColor)
                ) && 
                (
                    SupportEmail == other.SupportEmail ||
                    SupportEmail != null &&
                    SupportEmail.Equals(other.SupportEmail)
                ) && 
                (
                    NoreplyEmail == other.NoreplyEmail ||
                    NoreplyEmail != null &&
                    NoreplyEmail.Equals(other.NoreplyEmail)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    DefaultCulture == other.DefaultCulture ||
                    DefaultCulture != null &&
                    DefaultCulture.Equals(other.DefaultCulture)
                ) && 
                (
                    DefaultCurrency == other.DefaultCurrency ||
                    DefaultCurrency != null &&
                    DefaultCurrency.Equals(other.DefaultCurrency)
                ) && 
                (
                    UsersAreExternallyManaged == other.UsersAreExternallyManaged ||
                    UsersAreExternallyManaged != null &&
                    UsersAreExternallyManaged.Equals(other.UsersAreExternallyManaged)
                ) && 
                (
                    ExternalUsersAreManuallyManaged == other.ExternalUsersAreManuallyManaged ||
                    ExternalUsersAreManuallyManaged != null &&
                    ExternalUsersAreManuallyManaged.Equals(other.ExternalUsersAreManuallyManaged)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    LastUpdatedAt == other.LastUpdatedAt ||
                    LastUpdatedAt != null &&
                    LastUpdatedAt.Equals(other.LastUpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Subdomain != null)
                    hashCode = hashCode * 59 + Subdomain.GetHashCode();
                    if (WebUrl != null)
                    hashCode = hashCode * 59 + WebUrl.GetHashCode();
                    if (BackendApiUrl != null)
                    hashCode = hashCode * 59 + BackendApiUrl.GetHashCode();
                    if (FrontendApiUrl != null)
                    hashCode = hashCode * 59 + FrontendApiUrl.GetHashCode();
                    if (LogoSvgUrl != null)
                    hashCode = hashCode * 59 + LogoSvgUrl.GetHashCode();
                    if (LogoPngUrl != null)
                    hashCode = hashCode * 59 + LogoPngUrl.GetHashCode();
                    if (IconIcoUrl != null)
                    hashCode = hashCode * 59 + IconIcoUrl.GetHashCode();
                    if (PrimaryColor != null)
                    hashCode = hashCode * 59 + PrimaryColor.GetHashCode();
                    if (SecondaryColor != null)
                    hashCode = hashCode * 59 + SecondaryColor.GetHashCode();
                    if (TextOnPrimaryColor != null)
                    hashCode = hashCode * 59 + TextOnPrimaryColor.GetHashCode();
                    if (TextOnSecondaryColor != null)
                    hashCode = hashCode * 59 + TextOnSecondaryColor.GetHashCode();
                    if (SupportEmail != null)
                    hashCode = hashCode * 59 + SupportEmail.GetHashCode();
                    if (NoreplyEmail != null)
                    hashCode = hashCode * 59 + NoreplyEmail.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (DefaultCulture != null)
                    hashCode = hashCode * 59 + DefaultCulture.GetHashCode();
                    if (DefaultCurrency != null)
                    hashCode = hashCode * 59 + DefaultCurrency.GetHashCode();
                    if (UsersAreExternallyManaged != null)
                    hashCode = hashCode * 59 + UsersAreExternallyManaged.GetHashCode();
                    if (ExternalUsersAreManuallyManaged != null)
                    hashCode = hashCode * 59 + ExternalUsersAreManuallyManaged.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (LastUpdatedAt != null)
                    hashCode = hashCode * 59 + LastUpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Tenant left, Tenant right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tenant left, Tenant right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
