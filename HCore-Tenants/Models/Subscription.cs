/*
 * Smint.io Portals Admin Backend API
 *
 * The Smint.io Portals Admin Backend API allows to administrate the Portals API backend 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: office@smint.io
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HCore.Tenants.Models
{ 
    /// <summary>
    /// The subscription
    /// </summary>
    [DataContract]
    [NotMapped]
    [Serializable]
	public partial class Subscription : IEquatable<Subscription>
    { 
		private string _Uuid;
		
		/// <summary>
        /// The record UUID
        /// </summary>
        /// <value>The record UUID</value>
        [Required]
        [DataMember(Name="uuid")]
		public string Uuid { get => _Uuid; set { _Uuid = value; UuidSet = true; } }
		
		public bool UuidSet = false;		

		private List<string> _SubscriptionKeys;
		
		/// <summary>
        /// The subscription keys
        /// </summary>
        /// <value>The subscription keys</value>
        [DataMember(Name="subscription_keys")]
		public List<string> SubscriptionKeys { get => _SubscriptionKeys; set { _SubscriptionKeys = value; SubscriptionKeysSet = true; } }
		
		public bool SubscriptionKeysSet = false;		

		private List<string> _FeatureKeys;
		
		/// <summary>
        /// The feature keys
        /// </summary>
        /// <value>The feature keys</value>
        [DataMember(Name="feature_keys")]
		public List<string> FeatureKeys { get => _FeatureKeys; set { _FeatureKeys = value; FeatureKeysSet = true; } }
		
		public bool FeatureKeysSet = false;		

		private List<string> _ExtraSubscriptionKeys;
		
		/// <summary>
        /// The extra subscription keys
        /// </summary>
        /// <value>The extra subscription keys</value>
        [DataMember(Name="extra_subscription_keys")]
		public List<string> ExtraSubscriptionKeys { get => _ExtraSubscriptionKeys; set { _ExtraSubscriptionKeys = value; ExtraSubscriptionKeysSet = true; } }
		
		public bool ExtraSubscriptionKeysSet = false;		

		private List<string> _ExtraFeatureKeys;
		
		/// <summary>
        /// The extra feature keys
        /// </summary>
        /// <value>The extra feature keys</value>
        [DataMember(Name="extra_feature_keys")]
		public List<string> ExtraFeatureKeys { get => _ExtraFeatureKeys; set { _ExtraFeatureKeys = value; ExtraFeatureKeysSet = true; } }
		
		public bool ExtraFeatureKeysSet = false;		

		private string _Scope;
		
		/// <summary>
        /// The scope
        /// </summary>
        /// <value>The scope</value>
        [DataMember(Name="scope")]
		public string Scope { get => _Scope; set { _Scope = value; ScopeSet = true; } }
		
		public bool ScopeSet = false;		

		private List<string> _ScopeUuids;
		
		/// <summary>
        /// The extra feature keys
        /// </summary>
        /// <value>The extra feature keys</value>
        [DataMember(Name="scope_uuids")]
		public List<string> ScopeUuids { get => _ScopeUuids; set { _ScopeUuids = value; ScopeUuidsSet = true; } }
		
		public bool ScopeUuidsSet = false;		

		private string _Name;
		
		/// <summary>
        /// The subscription name
        /// </summary>
        /// <value>The subscription name</value>
        [DataMember(Name="name")]
		public string Name { get => _Name; set { _Name = value; NameSet = true; } }
		
		public bool NameSet = false;		

		private string _Comment;
		
		/// <summary>
        /// The comment
        /// </summary>
        /// <value>The comment</value>
        [DataMember(Name="comment")]
		public string Comment { get => _Comment; set { _Comment = value; CommentSet = true; } }
		
		public bool CommentSet = false;		

		private bool? _IsActive;
		
		/// <summary>
        /// Indicates, if the subscription is active
        /// </summary>
        /// <value>Indicates, if the subscription is active</value>
        [DataMember(Name="is_active")]
		public bool? IsActive { get => _IsActive; set { _IsActive = value; IsActiveSet = true; } }
		
		public bool IsActiveSet = false;		

		private bool? _IsLocked;
		
		/// <summary>
        /// Indicates, if the subscription is locked
        /// </summary>
        /// <value>Indicates, if the subscription is locked</value>
        [DataMember(Name="is_locked")]
		public bool? IsLocked { get => _IsLocked; set { _IsLocked = value; IsLockedSet = true; } }
		
		public bool IsLockedSet = false;		

		private string _LockReason;
		
		/// <summary>
        /// The lock reason
        /// </summary>
        /// <value>The lock reason</value>
        [DataMember(Name="lock_reason")]
		public string LockReason { get => _LockReason; set { _LockReason = value; LockReasonSet = true; } }
		
		public bool LockReasonSet = false;		

		private bool? _IsOverdue;
		
		/// <summary>
        /// Indicates, if the subscription is overdue
        /// </summary>
        /// <value>Indicates, if the subscription is overdue</value>
        [DataMember(Name="is_overdue")]
		public bool? IsOverdue { get => _IsOverdue; set { _IsOverdue = value; IsOverdueSet = true; } }
		
		public bool IsOverdueSet = false;		

		private DateTimeOffset? _IsOverdueSince;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) since when the subscription is overdue
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) since when the subscription is overdue</value>
        [DataMember(Name="is_overdue_since")]
		public DateTimeOffset? IsOverdueSince { get => _IsOverdueSince; set { _IsOverdueSince = value; IsOverdueSinceSet = true; } }
		
		public bool IsOverdueSinceSet = false;		

		private DateTimeOffset? _ExpiresAt;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) when  the subscription will expire
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) when  the subscription will expire</value>
        [DataMember(Name="expires_at")]
		public DateTimeOffset? ExpiresAt { get => _ExpiresAt; set { _ExpiresAt = value; ExpiresAtSet = true; } }
		
		public bool ExpiresAtSet = false;		

		private decimal? _Price;
		
		/// <summary>
        /// The price of the subscription
        /// </summary>
        /// <value>The price of the subscription</value>
        [DataMember(Name="price")]
		public decimal? Price { get => _Price; set { _Price = value; PriceSet = true; } }
		
		public bool PriceSet = false;		

		private string _Currency;
		
		/// <summary>
        /// The currency
        /// </summary>
        /// <value>The currency</value>
        [DataMember(Name="currency")]
		public string Currency { get => _Currency; set { _Currency = value; CurrencySet = true; } }
		
		public bool CurrencySet = false;		

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SubscriptionBillingTypeEnum
        {
            
            /// <summary>
            /// Enum MonthlyInvoiceEnum for monthly_invoice
            /// </summary>
            [EnumMember(Value = "monthly_invoice")]
            MonthlyInvoiceEnum = 1-1,
            
            /// <summary>
            /// Enum YearlyInvoiceEnum for yearly_invoice
            /// </summary>
            [EnumMember(Value = "yearly_invoice")]
            YearlyInvoiceEnum = 2-1,
            
            /// <summary>
            /// Enum MonthlyAutomaticEnum for monthly_automatic
            /// </summary>
            [EnumMember(Value = "monthly_automatic")]
            MonthlyAutomaticEnum = 3-1,
            
            /// <summary>
            /// Enum YearlyAutomaticEnum for yearly_automatic
            /// </summary>
            [EnumMember(Value = "yearly_automatic")]
            YearlyAutomaticEnum = 4-1
        }

		private SubscriptionBillingTypeEnum? _BillingType;
		
		/// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [DataMember(Name="billing_type")]
		public SubscriptionBillingTypeEnum? BillingType { get => _BillingType; set { _BillingType = value; BillingTypeSet = true; } }
		
		public bool BillingTypeSet = false;		

		private string _CompanyName;
		
		/// <summary>
        /// The company name
        /// </summary>
        /// <value>The company name</value>
        [DataMember(Name="company_name")]
		public string CompanyName { get => _CompanyName; set { _CompanyName = value; CompanyNameSet = true; } }
		
		public bool CompanyNameSet = false;		

		private string _AddressLine1;
		
		/// <summary>
        /// The address line 1
        /// </summary>
        /// <value>The address line 1</value>
        [DataMember(Name="address_line_1")]
		public string AddressLine1 { get => _AddressLine1; set { _AddressLine1 = value; AddressLine1Set = true; } }
		
		public bool AddressLine1Set = false;		

		private string _AddressLine2;
		
		/// <summary>
        /// The address line 2
        /// </summary>
        /// <value>The address line 2</value>
        [DataMember(Name="address_line_2")]
		public string AddressLine2 { get => _AddressLine2; set { _AddressLine2 = value; AddressLine2Set = true; } }
		
		public bool AddressLine2Set = false;		

		private string _PostalCode;
		
		/// <summary>
        /// The postal code
        /// </summary>
        /// <value>The postal code</value>
        [DataMember(Name="postal_code")]
		public string PostalCode { get => _PostalCode; set { _PostalCode = value; PostalCodeSet = true; } }
		
		public bool PostalCodeSet = false;		

		private string _City;
		
		/// <summary>
        /// The city
        /// </summary>
        /// <value>The city</value>
        [DataMember(Name="city")]
		public string City { get => _City; set { _City = value; CitySet = true; } }
		
		public bool CitySet = false;		

		private string _State;
		
		/// <summary>
        /// The state, country, province or region
        /// </summary>
        /// <value>The state, country, province or region</value>
        [DataMember(Name="state")]
		public string State { get => _State; set { _State = value; StateSet = true; } }
		
		public bool StateSet = false;		

		private string _CountryCode;
		
		/// <summary>
        /// The country code
        /// </summary>
        /// <value>The country code</value>
        [DataMember(Name="country_code")]
		public string CountryCode { get => _CountryCode; set { _CountryCode = value; CountryCodeSet = true; } }
		
		public bool CountryCodeSet = false;		

		private string _VatId;
		
		/// <summary>
        /// The VAT ID
        /// </summary>
        /// <value>The VAT ID</value>
        [DataMember(Name="vat_id")]
		public string VatId { get => _VatId; set { _VatId = value; VatIdSet = true; } }
		
		public bool VatIdSet = false;		

		private string _ContactPersonName;
		
		/// <summary>
        /// The contact person name
        /// </summary>
        /// <value>The contact person name</value>
        [DataMember(Name="contact_person_name")]
		public string ContactPersonName { get => _ContactPersonName; set { _ContactPersonName = value; ContactPersonNameSet = true; } }
		
		public bool ContactPersonNameSet = false;		

		private string _ContactPersonEmailAddress;
		
		/// <summary>
        /// The contact person email address
        /// </summary>
        /// <value>The contact person email address</value>
        [DataMember(Name="contact_person_email_address")]
		public string ContactPersonEmailAddress { get => _ContactPersonEmailAddress; set { _ContactPersonEmailAddress = value; ContactPersonEmailAddressSet = true; } }
		
		public bool ContactPersonEmailAddressSet = false;		

		private int? _Version;
		
		/// <summary>
        /// The record version
        /// </summary>
        /// <value>The record version</value>
        [DataMember(Name="version")]
		public int? Version { get => _Version; set { _Version = value; VersionSet = true; } }
		
		public bool VersionSet = false;		

		private DateTimeOffset? _CreatedAt;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) when the record was created
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) when the record was created</value>
        [DataMember(Name="created_at")]
		public DateTimeOffset? CreatedAt { get => _CreatedAt; set { _CreatedAt = value; CreatedAtSet = true; } }
		
		public bool CreatedAtSet = false;		

		private DateTimeOffset? _LastUpdatedAt;
		
		/// <summary>
        /// The time (formatted according to RFC 3339, section 5.6) when the record was last updated
        /// </summary>
        /// <value>The time (formatted according to RFC 3339, section 5.6) when the record was last updated</value>
        [DataMember(Name="last_updated_at")]
		public DateTimeOffset? LastUpdatedAt { get => _LastUpdatedAt; set { _LastUpdatedAt = value; LastUpdatedAtSet = true; } }
		
		public bool LastUpdatedAtSet = false;		

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  SubscriptionKeys: ").Append(SubscriptionKeys).Append("\n");
            sb.Append("  FeatureKeys: ").Append(FeatureKeys).Append("\n");
            sb.Append("  ExtraSubscriptionKeys: ").Append(ExtraSubscriptionKeys).Append("\n");
            sb.Append("  ExtraFeatureKeys: ").Append(ExtraFeatureKeys).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeUuids: ").Append(ScopeUuids).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  LockReason: ").Append(LockReason).Append("\n");
            sb.Append("  IsOverdue: ").Append(IsOverdue).Append("\n");
            sb.Append("  IsOverdueSince: ").Append(IsOverdueSince).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  ContactPersonName: ").Append(ContactPersonName).Append("\n");
            sb.Append("  ContactPersonEmailAddress: ").Append(ContactPersonEmailAddress).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Subscription)obj);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    SubscriptionKeys == other.SubscriptionKeys ||
                    SubscriptionKeys != null &&
                    SubscriptionKeys.SequenceEqual(other.SubscriptionKeys)
                ) && 
                (
                    FeatureKeys == other.FeatureKeys ||
                    FeatureKeys != null &&
                    FeatureKeys.SequenceEqual(other.FeatureKeys)
                ) && 
                (
                    ExtraSubscriptionKeys == other.ExtraSubscriptionKeys ||
                    ExtraSubscriptionKeys != null &&
                    ExtraSubscriptionKeys.SequenceEqual(other.ExtraSubscriptionKeys)
                ) && 
                (
                    ExtraFeatureKeys == other.ExtraFeatureKeys ||
                    ExtraFeatureKeys != null &&
                    ExtraFeatureKeys.SequenceEqual(other.ExtraFeatureKeys)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.Equals(other.Scope)
                ) && 
                (
                    ScopeUuids == other.ScopeUuids ||
                    ScopeUuids != null &&
                    ScopeUuids.SequenceEqual(other.ScopeUuids)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsLocked == other.IsLocked ||
                    IsLocked != null &&
                    IsLocked.Equals(other.IsLocked)
                ) && 
                (
                    LockReason == other.LockReason ||
                    LockReason != null &&
                    LockReason.Equals(other.LockReason)
                ) && 
                (
                    IsOverdue == other.IsOverdue ||
                    IsOverdue != null &&
                    IsOverdue.Equals(other.IsOverdue)
                ) && 
                (
                    IsOverdueSince == other.IsOverdueSince ||
                    IsOverdueSince != null &&
                    IsOverdueSince.Equals(other.IsOverdueSince)
                ) && 
                (
                    ExpiresAt == other.ExpiresAt ||
                    ExpiresAt != null &&
                    ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    BillingType == other.BillingType ||
                    BillingType != null &&
                    BillingType.Equals(other.BillingType)
                ) && 
                (
                    CompanyName == other.CompanyName ||
                    CompanyName != null &&
                    CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    AddressLine1 == other.AddressLine1 ||
                    AddressLine1 != null &&
                    AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    AddressLine2 == other.AddressLine2 ||
                    AddressLine2 != null &&
                    AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    VatId == other.VatId ||
                    VatId != null &&
                    VatId.Equals(other.VatId)
                ) && 
                (
                    ContactPersonName == other.ContactPersonName ||
                    ContactPersonName != null &&
                    ContactPersonName.Equals(other.ContactPersonName)
                ) && 
                (
                    ContactPersonEmailAddress == other.ContactPersonEmailAddress ||
                    ContactPersonEmailAddress != null &&
                    ContactPersonEmailAddress.Equals(other.ContactPersonEmailAddress)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    LastUpdatedAt == other.LastUpdatedAt ||
                    LastUpdatedAt != null &&
                    LastUpdatedAt.Equals(other.LastUpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (SubscriptionKeys != null)
                    hashCode = hashCode * 59 + SubscriptionKeys.GetHashCode();
                    if (FeatureKeys != null)
                    hashCode = hashCode * 59 + FeatureKeys.GetHashCode();
                    if (ExtraSubscriptionKeys != null)
                    hashCode = hashCode * 59 + ExtraSubscriptionKeys.GetHashCode();
                    if (ExtraFeatureKeys != null)
                    hashCode = hashCode * 59 + ExtraFeatureKeys.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    if (ScopeUuids != null)
                    hashCode = hashCode * 59 + ScopeUuids.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (IsLocked != null)
                    hashCode = hashCode * 59 + IsLocked.GetHashCode();
                    if (LockReason != null)
                    hashCode = hashCode * 59 + LockReason.GetHashCode();
                    if (IsOverdue != null)
                    hashCode = hashCode * 59 + IsOverdue.GetHashCode();
                    if (IsOverdueSince != null)
                    hashCode = hashCode * 59 + IsOverdueSince.GetHashCode();
                    if (ExpiresAt != null)
                    hashCode = hashCode * 59 + ExpiresAt.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (BillingType != null)
                    hashCode = hashCode * 59 + BillingType.GetHashCode();
                    if (CompanyName != null)
                    hashCode = hashCode * 59 + CompanyName.GetHashCode();
                    if (AddressLine1 != null)
                    hashCode = hashCode * 59 + AddressLine1.GetHashCode();
                    if (AddressLine2 != null)
                    hashCode = hashCode * 59 + AddressLine2.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                    if (VatId != null)
                    hashCode = hashCode * 59 + VatId.GetHashCode();
                    if (ContactPersonName != null)
                    hashCode = hashCode * 59 + ContactPersonName.GetHashCode();
                    if (ContactPersonEmailAddress != null)
                    hashCode = hashCode * 59 + ContactPersonEmailAddress.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (LastUpdatedAt != null)
                    hashCode = hashCode * 59 + LastUpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Subscription left, Subscription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Subscription left, Subscription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
